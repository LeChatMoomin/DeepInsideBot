const BotToken = "7426940346:AAFlm0c-H3GYbBO7PP0QZkUmBDop5Dfl-lw";
const SheetId = "1-Y_acjNjPRVWkf80Dt8VmN5IfPq-XIa3v_Bgj6qrf2g";
const MonthNames = {
  1 : "–Ø–Ω–≤–∞—Ä—å",
  2 : "–§–µ–≤—Ä–∞–ª—å",
  3 : "–ú–∞—Ä—Ç",
  4 : "–ê–ø—Ä–µ–ª—å",
  5 : "–ú–∞–π",
  6 : "–ò—é–Ω—å",
  7 : "–ò—é–ª—å",
  8 : "–ê–≤–≥—É—Å—Ç",
  9 : "–°–µ–Ω—Ç—è–±—Ä—å",
  10 : "–û–∫—Ç—è–±—Ä—å",
  11 : "–ù–æ—è–±—Ä—å",
  12 : "–î–µ–∫–∞–±—Ä—å"
}

const State = {
  Idle : "Idle",
  CountInsertion : "CountInsertion",
  SourceInsertion : "SourceInsertion",
  AdditionalInfoInsertion : "AdditionalInfoInsertion",
  Confirmation : "Confirmation",
}

const DataType = {
  State : "State",
  Count : "Count",
  Source : "Source",
  Info : "Info"
}

const DataAdress = {
  "State" : [1,1],
  "Count" : [1,2],
  "Source" : [1,3],
  "Info" : [1,4]
}

const GuestSource = {
  Yandex : "Yandex",
  KudaGo : "KudaGo",
  Beriozka : "Beriozka",
  Friends : "Friends",
  Moscow : "Moscow",
  Subscribed : "Subscribed",
  Blogger : "Blogger",
  Telegram : "Telegram",
  DontKnow : "DontKnow",
  Internet : "Internet",
}

const GuestSourceLocalized = {
  "Yandex" : "–Ø–Ω–¥–µ–∫—Å –ê—Ñ–∏—à–∞",
  "KudaGo" : "KudaGo",
  "Beriozka" : "Beriozka",
  "Friends" : "–û—Ç –¥—Ä—É–∑–µ–π",
  "Moscow" : "–ë—ã–ª–∏ –≤ –ú–æ—Å–∫–≤–µ",
  "Subscribed" : "–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ú–∞—Ä–∏—é",
  "Blogger" : "–ë–ª–æ–≥–µ—Ä",
  "Telegram" : "–¢–≥ –∫–∞–Ω–∞–ª",
  "DontKnow" : "–ù–µ –ø–æ–º–Ω—è—Ç",
  "Internet" : "–ù–∞—à–ª–∏ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
}

const AddNewGuestKeyboard = {
  "inline_keyboard" : [
    [
      {
        "text" : "–û—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã—Ö –≥–æ—Å—Ç–µ–π", "callback_data": "AddGuests"
      }
    ]
  ]
}

const AddGuestKeyboard = {
  "inline_keyboard" : [
    [
      {
        "text" : "–û—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Å—Ç–µ–π", "callback_data": "AddGuests"
      }
    ]
  ]
}

const CountKeyboard = {
  "inline_keyboard" : [
    [{"text" : "1", "callback_data" : "1"}, {"text" : "2", "callback_data" : "2"}],
    [{"text" : "3", "callback_data" : "3"}, {"text" : "4", "callback_data" : "4"}],
  ]
}

const SourceKeyboard = {
  "inline_keyboard" : [
    [{"text" : "–Ø–Ω–¥–µ–∫—Å –ê—Ñ–∏—à–∞", "callback_data" : "Yandex"}, {"text" : "KudaGo", "callback_data" : "KudaGo"}],
    [{"text" : "–û—Ç –¥—Ä—É–∑–µ–π", "callback_data" : "Friends"}, {"text" : "Beriozka", "callback_data" : "Beriozka"}],
    [{"text" : "–ë—ã–ª–∏ –≤ –ú–æ—Å–∫–≤–µ", "callback_data" : "Moscow"}, {"text" : "–ë–ª–æ–≥–µ—Ä", "callback_data" : "Blogger"}],
    [{"text" : "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ú–∞—Ä–∏–∏", "callback_data" : "Subscribed"}, {"text" : "–¢–≥ –∫–∞–Ω–∞–ª", "callback_data" : "Telegram"}],
    [{"text" : "–ù–∞—à–ª–∏ –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "callback_data" : "Internet"}, {"text" : "–ù–µ –ø–æ–º–Ω—è—Ç", "callback_data" : "DontKnow"}],
  ]
}

const AdditionalInfoKeyboard = {
  "inline_keyboard" : [
     [{"text" : "–ù–µ –ø–æ–º–Ω—è—Ç", "callback_data" : "DontKnow"}],
  ]
}

const ConfirmationKeyboard = {
  "inline_keyboard" : [
    [{"text" : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data" : "Confirm"}, {"text" : "–û—Ç–º–µ–Ω–∞", "callback_data" : "Cancel"}],
  ]
}

function doPost(income) {
  let contents = JSON.parse(income.postData.contents); 
  let text;
  let chat_id;
  let username;
  if (contents.hasOwnProperty("callback_query")){
    text = contents.callback_query.data;
    chat_id = contents.callback_query.from.id;
    username = contents.callback_query.from.username;
  }else{
    text = contents.message.text;
    chat_id = contents.message.chat.id
    username =  contents.message.from.username;
  }
  if(text == "AddGuests"){
    ClearTechSheet();
  }
  if(text == "/start"){
    SendResponse(chat_id, "–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!\n\n–°–µ–π—á–∞—Å –≤—ã —É–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –≥–æ—Å—Ç–µ–πüôå", AddGuestKeyboard);
    ClearTechSheet();
  }
  HandleInsertedText(text, chat_id,username);
}

function PostRowToSheet(rowData, sheetName) {
  let sheet = SpreadsheetApp.openById(SheetId).getSheetByName(sheetName);
  sheet.appendRow(rowData);
}

function SaveData(type, value){
  let sheet = SpreadsheetApp.openById(SheetId).getSheetByName("Tech");
  let adress = DataAdress[type];
  sheet.getRange(adress[0], adress[1]).setValue(value);
  Logger.log("Save " + adress + " ... " + value);
}

function GetSavedData(type) {
  let sheet = SpreadsheetApp.openById(SheetId).getSheetByName("Tech");
  let adress = DataAdress[type][1] - 1;
  let values = sheet.getDataRange().getValues();
  Logger.log("Get: " + "1," + adress + " ... " + type + " ... " + values[0][adress]);
  return values[0][adress];
}

function HandleInsertedText(text, chat_id, username){
  let currentState = GetSavedData(DataType.State); 
  switch (currentState){
    case State.Idle:
      if(text == "AddGuests"){
        SaveData(DataType.State, State.CountInsertion);
        SendResponse(chat_id, "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –ø—Ä–∏—à–ª–æ?", CountKeyboard);
      }
    break;
    case State.CountInsertion:
      if(!Number.isNaN(text) && Number.parseInt(text) > 0){
        SaveData(DataType.Count, text);
        SaveData(DataType.State, State.SourceInsertion);
        SendResponse(chat_id, "–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –≤—ã—Å—Ç–∞–≤–∫–µ?", SourceKeyboard);
      }else{
        SendResponse(chat_id, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —á–∏—Å–ª–æ\n(–ö–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ –Ω—É–ª—è)", CountKeyboard);
      }
    break;
    case State.SourceInsertion:
      SaveData(DataType.Source, text);
      if(text == GuestSource.Blogger || text == GuestSource.Telegram) {
        SaveData(DataType.State, State.AdditionalInfoInsertion);
        SendResponse(chat_id, "–ö–∞–∫–æ–π?‚úçÔ∏è", AdditionalInfoKeyboard);
      }else {

      let responseText = "–í—ã –≤–≤–µ–ª–∏:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: " + GetSavedData(DataType.Count) + "\n–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: " + GuestSourceLocalized[GetSavedData(DataType.  Source)] + " " + GetSavedData(DataType.Info) + "\n–í—Å—ë –≤–µ—Ä–Ω–æ?";
        SendResponse(chat_id,responseText, ConfirmationKeyboard);
        SaveData(DataType.State, State.Confirmation);
      }
    break;
    case State.AdditionalInfoInsertion:
      if(text == "DontKnow") {
        SaveData(DataType.Info, "(–ù–µ –ø–æ–º–Ω—è—Ç –∫–∞–∫–æ–π)")
      }else{
        SaveData(DataType.Info, text);
      }
      let responseText = "–í—ã –≤–≤–µ–ª–∏:\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: " + GetSavedData(DataType.Count) + "\n–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: " + GuestSourceLocalized[GetSavedData(DataType.Source)] + " " + GetSavedData(DataType.Info) + "\n–í—Å—ë –≤–µ—Ä–Ω–æ?";
      SendResponse(chat_id,responseText, ConfirmationKeyboard);
      SaveData(DataType.State, State.Confirmation);
    break;
    case State.Confirmation:
      if (text == "Confirm"){
        PostRowToSheet([username, GetActualTime(), GetSavedData(DataType.Count),GuestSourceLocalized[GetSavedData(DataType.Source)] + " " + GetSavedData(DataType.Info)], GetActualSheetName());
        SendResponse(chat_id, "–ì–æ—Å—Ç–∏ –æ—Ç–º–µ—á–µ–Ω—ã!", AddNewGuestKeyboard);
      }else {
         SendResponse(chat_id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω", AddGuestKeyboard);
      }
      ClearTechSheet();
    break;
  }
}

function ClearTechSheet() {
  let sheet = SpreadsheetApp.openById(SheetId).getSheetByName("Tech");
  sheet.clear();
  SaveData(DataType.State,State.Idle);
  SaveData(DataType.Info, " ");
}

function GetMe() {
  let response = UrlFetchApp.fetch("https://api.telegram.org/bot"+BotToken+"/GetMe");
  console.log(response.getContentText());
}

function SetWebHook() {
  let webAppUrl = "https://script.google.com/macros/s/AKfycbywzYlPopoFKRJaLwpoHAI8vcyrkt8yT9bFaSCba35h44jgKQ0jz5pqX-zV7forDHFK/exec";
  let response = UrlFetchApp.fetch("https://api.telegram.org/bot"+BotToken+"/setWebhook?url=" + webAppUrl);
  console.log(response.getContentText());
}

function SendResponse(chat_id, text, keyBoard){
  let data = {
    method: "post",
    payload: {
      method: "sendMessage",
      chat_id: String(chat_id),
      text: text,
      parse_mode: "HTML",
      reply_markup: JSON.stringify(keyBoard)
    }
  };
  UrlFetchApp.fetch("https://api.telegram.org/bot" + BotToken + '/', data);
}

function GetActualTime() {
  let d = new Date();
  let date = pad(d.getDate());
  let month = pad(d.getMonth() + 1);
  let hours = pad(d.getHours());
  let minutes = pad(d.getMinutes());

  let fomated = date + "." + month + " " + hours + ":" + minutes;
  return fomated;
}

function GetActualSheetName() {
  let month = new Date().getMonth() + 1;
  let sheetName = MonthNames[month];
  return sheetName;
}

function pad(n) {
  return (n < 10 ? '0' : '') + n;
}
